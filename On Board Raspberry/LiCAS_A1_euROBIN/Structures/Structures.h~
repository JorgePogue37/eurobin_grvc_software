/*
 * Copyright (c) 2017 Alejandro Suarez Fernandez-Miranda
 *
 * This source code is part of the PhD thesis "Dexterous Aerial Manipulation"
 * and part of the AEROARMS project.
 *
 * University of Seville - Robotics, Vision and Control Group
 *
 * The distribution of this source code is not allowed without the consent of the author
 *
 * File name: Structures.h
 */


#ifndef STRUCTURES_H_
#define STRUCTURES_H_


#include "../ArmController/ArmController.h"
#include "../Kinematics/Kinematics.h"
#include "./StructuresInterface.h"



// Structure definition

typedef struct
{
	uint8_t leftGripperContact;		// 0 if no object is detected, 1 if the micro interruptor has detected an object
	uint8_t rightGripperContact;
	float leftArmDeflection[4];
	float rightArmDeflection[4];
} ARM_STATE;

// Structure containing all the variables and class instances shared between the threads
typedef struct
{
	int usbDeviceLeftArm;
	int usbDeviceRightArm;
	int usbDeviceSTM32Board;
	int udpListeningPort;
	int teleopUDPListeningPort;
	ArmController * leftArmController;
	ArmController * rightArmController;
	Kinematics * leftArmKinematics;
	Kinematics * rightArmKinematics;
	ARM_STATE armState;
	double leftArmMarkerPosition[3];
	double leftArmMarkerOrientation[3];
	double rightArmMarkerPosition[3];
	double rightArmMarkerOrientation[3];
	double teleoperatedPosition[3];
	double teleoperatedOrientation[3];
	double adcChannelsSTM32Board[NUM_ADC_CHANNELS_STM32BOARD];
	int leftButton3DConnexion;
	int rightButton3DConnexion;
	int visionSensorDataReceivedFlag;
	int visionDeflectionDataReceivedFlag;
	int controlReferencesDataReceivedFlag;
	ARMS_CONTROL_REFERENCES_DATA_PACKET armsControlRefs;
	VISION_DEFLECTION_DATA_PACKET visionDeflection;
	int keepAliveWarning;
	int gcsCode;
	bool gcsCodeReceivedFlag;
	bool endFlag;
} THREAD_ARGS;


typedef struct
{
	uint8_t header[2];		// 0xFF 0xFF
	uint8_t armID;			// 1 for left arm, 2 for right arm
	float shoulderYaw;		// in [deg]
	float shoulderPitch;	// in [deg]
	float elbowPitch;		// in [deg]
	uint8_t checksum;		// XOR operation over all bytes except the header
} ARM_CONTROL_PACKET;


// Data packet received from the STM32 board through the USART containing analog and digital inputs data
typedef struct
{
	uint8_t header[3];		// "ARM" character sequence
	uint8_t packetID;
	uint8_t packetACK;
	uint16_t secCounter;
	uint16_t msCounter;
	uint16_t jointDeflection[NUM_COMPLIANT_JOINTS];
	uint8_t digitalInput[NUM_DIGITAL_INPUTS];
	uint8_t checksum;
} ARM_STATE_PACKET;


// Data packet sent to the STM32 board through the USART for controlling the grippers
typedef struct
{
	char header[3];		// "CMD" character sequence
	uint8_t packetID;
	uint16_t pwm1;
	uint16_t pwm2;
	uint8_t  checksum;
} __attribute__((packed)) COMMAND_PACKET;


// Data packet received from the Ground Control Station through an UDP socket
typedef struct
{
	char header[3];		// "GCS" character sequence
	int code;
} GCS_PACKET;


// Data packet received from the teleoperation node
typedef struct
{
	char header[3];		// "TOP" character sequence
	float x;
	float y;
	float z;
	float roll;
	float pitch;
	float yaw;
	int buttons[2];;
} TELEOP_PACKET;


// Union definition
union Int16ToByteArray
{
	int16_t value;
	uint8_t str[2];
};


union floatToByteArray
{
	float value;
	uint8_t byteArray[4];
};



#endif

