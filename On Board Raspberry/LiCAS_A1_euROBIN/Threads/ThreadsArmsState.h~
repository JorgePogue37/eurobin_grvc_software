/*
 * Copyright (c) 2017 Alejandro Suarez Fernandez-Miranda
 *
 * This source code is part of the PhD thesis "Dexterous Aerial Manipulation"
 * and part of the AEROARMS project.
 *
 * University of Seville - Robotics, Vision and Control Group
 *
 * File name: ThreadsArmState.h
 */
 
 
// Standard library
#include <iostream>
#include <fstream>
#include <math.h>
#include <termios.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>


// Specific library
#include "../ArmController/ArmController.h"


// Constant definition



// Thread function declaration
static void * leftArmServosDataThreadFunction(void * args);
static void * rightArmServosDataThreadFunction(void * args);


// Namespaces
using namespace std;


/*
 * Thread function for receiving the measurements sent by the left arm servos.
 */
static void * leftArmServosDataThreadFunction(void * args)
{
	THREAD_ARGS * threadArgs = (THREAD_ARGS*)args;
	ArmController * leftArmController = threadArgs->leftArmController;
	struct timeval tini;
	struct timeval tend;
	double t = 0;
	double elapsedTime = 0;
	ssize_t bytesRead = 0;
	unsigned int k = 0;
	unsigned int headerIndex = 0;
	ssize_t bytesReceived = 0;
	uint8_t bufferRx[RX_BUFFER_LENGTH];
	uint8_t buffer[RX_BUFFER_LENGTH];
	uint8_t bufferAux[RX_BUFFER_LENGTH];
	uint8_t tempBuffer[RX_BUFFER_LENGTH];
	uint8_t rxState = 1;
	uint8_t indexServo = 1;
	bool headerFound = false;
	bool packetReceived = false;
	bool bufferOverflow = false;
	
	int error = 0;
	

	cout << "Left arm servos data thread started" << endl;
	
	// Init data acquisition loop
	while(error == 0 && threadArgs->endFlag == false)
	{
		// Get current time stamp
		gettimeofday(&tini, NULL);
		
		// Send the RAM read request packet to the corresponding servo
		if(indexServo == 1)
			leftArmController->shoulderPitchServoState->sendStatusUpdateRequest(threadArgs->usbDeviceLeftArm);
		else if(indexServo == 2)
			leftArmController->shoulderRollServoState->sendStatusUpdateRequest(threadArgs->usbDeviceLeftArm);
		else if(indexServo == 3)
			leftArmController->shoulderYawServoState->sendStatusUpdateRequest(threadArgs->usbDeviceLeftArm);
		else
			leftArmController->elbowPitchServoState->sendStatusUpdateRequest(threadArgs->usbDeviceLeftArm);
			
		/****************************** RECEPTION OF DATA FROM SERVOS INI ******************************/
			
		// Initialize variables of the state machine
		bytesReceived = 0;
		rxState = 1;
		headerFound = false;
		packetReceived = false;
				
		while(packetReceived == false && error == 0 && threadArgs->endFlag == false)
		{
			switch (rxState)
			{
				case 1:
					// Wait the reception of a new data packet
					bytesRead = read(threadArgs->usbDeviceLeftArm, (char*)bufferRx, RX_BUFFER_LENGTH - 1);
					if(bytesRead > 0)
					{
						if(bytesReceived + bytesRead >= RX_BUFFER_LENGTH)
						{
							bufferOverflow = true;
							bytesReceived = 0;
							headerFound = false;
							packetReceived = false;
							if(LEFT_ARM_WARNING_DISPLAY_FLAG == 1)
								cout << "WARNING: [in leftArmServosDataThreadFunction] buffer overflow." << endl;
						}
						else
						{
							// Copy the received data into the buffer
							for(k = 0; k < bytesRead; k++)
								buffer[k + bytesReceived] = bufferRx[k];
							bytesReceived += bytesRead;
						}
					}
		
					// Decide which is the next state
					if(bytesRead <= 0 || bytesReceived < 2 || bufferOverflow == true)
					{
						rxState = 1;			// Wait the reception of data
						bufferOverflow = false;
					}
					else
					{
						if(headerFound == false)
							rxState = 2;	// After receiving new data, check if header is found
						else
							rxState = 3;	// Header was already found. Now check if packet is completely received.
					}
								
					break;
						
						
				case 2:
					// Look for packet header (0x255 0x255)
					headerFound = false;
					for(k = 0; k < bytesReceived - 2 && headerFound == false; k++)
					{
						if(buffer[k] == 255 && buffer[k+1] == 255)
						{
							headerFound = true;
							headerIndex = k;
						}
					}
							
					// Decide which is the next state
					if(headerFound == false)
						rxState = 1;	// Wait the reception of new data in the next state
					else
						rxState = 3;	// Check if the packet has been completely received
							
					break;
					
					
				case 3:		
					// Check if the packet has been fully received
					if(bytesReceived - headerIndex >= SERVO_DATA_PACKET_LENGTH)
						packetReceived = true;
					else
						packetReceived = false;
							
					// Decide which is the next state
					if(packetReceived == false)
						rxState = 1;	// Wait the reception of new data in the next state
						
					break;
			}
		}
			
		/****************************** RECEPTION OF DATA FROM SERVOS END ******************************/
			
		// Extract the data packet
		for(k = 0; k < SERVO_DATA_PACKET_LENGTH; k++)
			tempBuffer[k] = buffer[k + headerIndex];
			
		// Update the state of the corresponding servo
		leftArmController->updateServoState((char*)tempBuffer, SERVO_DATA_PACKET_LENGTH);	
			
		// Get time stamp at the end of the loop
		gettimeofday(&tend, NULL);
		t = (tend.tv_sec - tini.tv_sec) + 1e-6*(tend.tv_usec - tini.tv_usec);
			
		// Wait to complete a RAM read period
		if(t > SERVO_RAM_READ_INTERVAL)
		{
			if(LEFT_ARM_WARNING_DISPLAY_FLAG == 1)
				cout << "WARNING: [in leftArmServosDataThreadFunction] servo RAM read period is exceeded" << endl;
		}
		else
			usleep((useconds_t)(1e6*(SERVO_RAM_READ_INTERVAL - t)));
		
		// Update the index of the next servo to read
		indexServo++;
		if(indexServo > 4)
		{
			// Reset servo index
			indexServo = 1;
		}
	}
	
	cout << "Left arm servos data thread terminated" << endl;

	return 0;
}



/*
 * Thread function for receiving the measurements sent by the right arm servos.
 */
static void * rightArmServosDataThreadFunction(void * args)
{
	THREAD_ARGS * threadArgs = (THREAD_ARGS*)args;
	ArmController * rightArmController = threadArgs->rightArmController;
	struct timeval tini;
	struct timeval tend;
	double t = 0;
	double elapsedTime = 0;
	ssize_t bytesRead = 0;
	unsigned int k = 0;
	unsigned int headerIndex = 0;
	ssize_t bytesReceived = 0;
	uint8_t bufferRx[RX_BUFFER_LENGTH];
	uint8_t buffer[RX_BUFFER_LENGTH];
	uint8_t bufferAux[RX_BUFFER_LENGTH];
	uint8_t tempBuffer[RX_BUFFER_LENGTH];
	uint8_t rxState = 1;
	uint8_t indexServo = 1;
	bool headerFound = false;
	bool packetReceived = false;
	bool bufferOverflow = false;
	
	int error = 0;
	
	
	cout << "Right arm servos data thread started" << endl;
	
	// Init data acquisition loop
	while(error == 0 && threadArgs->endFlag == false)
	{
		// Get current time stamp
		gettimeofday(&tini, NULL);
		
		// Send the RAM read request packet to the corresponding servo
		if(indexServo == 1)
			rightArmController->shoulderPitchServoState->sendStatusUpdateRequest(threadArgs->usbDeviceRightArm);
		else if(indexServo == 2)
			rightArmController->shoulderRollServoState->sendStatusUpdateRequest(threadArgs->usbDeviceRightArm);
		else if(indexServo == 3)
			rightArmController->shoulderYawServoState->sendStatusUpdateRequest(threadArgs->usbDeviceRightArm);
		else
			rightArmController->elbowPitchServoState->sendStatusUpdateRequest(threadArgs->usbDeviceRightArm);
			
		/****************************** RECEPTION OF DATA FROM SERVOS INI ******************************/
			
		// Initialize variables of the state machine
		bytesReceived = 0;
		rxState = 1;
		headerFound = false;
		packetReceived = false;
				
		while(packetReceived == false && error == 0 && threadArgs->endFlag == false)
		{
			switch (rxState)
			{
				case 1:
					// Wait the reception of a new data packet
					bytesRead = read(threadArgs->usbDeviceRightArm, (char*)bufferRx, RX_BUFFER_LENGTH - 1);
					if(bytesRead > 0)
					{
						if(bytesReceived + bytesRead >= RX_BUFFER_LENGTH)
						{
							bufferOverflow = true;
							bytesReceived = 0;
							headerFound = false;
							packetReceived = false;
							if(RIGHT_ARM_WARNING_DISPLAY_FLAG == 1)
								cout << "WARNING: [in rightArmServosDataThreadFunction] buffer overflow." << endl;
						}
						else
						{
							// Copy the received data into the buffer
							for(k = 0; k < bytesRead; k++)
								buffer[k + bytesReceived] = bufferRx[k];
							bytesReceived += bytesRead;
						}
					}
		
					// Decide which is the next state
					if(bytesRead <= 0 || bytesReceived < 2 || bufferOverflow == true)
					{
						rxState = 1;			// Wait the reception of data
						bufferOverflow = false;
					}
					else
					{
						if(headerFound == false)
							rxState = 2;	// After receiving new data, check if header is found
						else
							rxState = 3;	// Header was already found. Now check if packet is completely received.
					}
								
					break;
						
						
				case 2:
					// Look for packet header (0x255 0x255)
					headerFound = false;
					for(k = 0; k < bytesReceived - 2 && headerFound == false; k++)
					{
						if(buffer[k] == 255 && buffer[k+1] == 255)
						{
							headerFound = true;
							headerIndex = k;
						}
					}
							
					// Decide which is the next state
					if(headerFound == false)
						rxState = 1;	// Wait the reception of new data in the next state
					else
						rxState = 3;	// Check if the packet has been completely received
							
					break;
					
					
				case 3:		
					// Check if the packet has been fully received
					if(bytesReceived - headerIndex >= SERVO_DATA_PACKET_LENGTH)
						packetReceived = true;
					else
						packetReceived = false;
							
					// Decide which is the next state
					if(packetReceived == false)
						rxState = 1;	// Wait the reception of new data in the next state
						
					break;
			}
		}
			
		/****************************** RECEPTION OF DATA FROM SERVOS END ******************************/
			
		// Extract the data packet
		for(k = 0; k < SERVO_DATA_PACKET_LENGTH; k++)
			tempBuffer[k] = buffer[k + headerIndex];
			
		// Update the state of the corresponding servo
		rightArmController->updateServoState((char*)tempBuffer, SERVO_DATA_PACKET_LENGTH);	
			
		// Get time stamp at the end of the loop
		gettimeofday(&tend, NULL);
		t = (tend.tv_sec - tini.tv_sec) + 1e-6*(tend.tv_usec - tini.tv_usec);
			
		// Wait to complete a RAM read period
		if(t > SERVO_RAM_READ_INTERVAL)
		{
			if(RIGHT_ARM_WARNING_DISPLAY_FLAG == 1)
				cout << "WARNING: [in rightArmServosDataThreadFunction] servo RAM read period is exceeded" << endl;
		}
		else
			usleep((useconds_t)(1e6*(SERVO_RAM_READ_INTERVAL - t)));
		
		// Update the index of the next servo to read
		indexServo++;
		if(indexServo > 4)
		{
			// Reset servo index
			indexServo = 1;
		}
	}
	
	cout << "Right arm servos data thread terminated" << endl;


	return 0;
}



