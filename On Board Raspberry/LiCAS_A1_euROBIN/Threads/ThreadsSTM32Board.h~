/*
 * Copyright (c) 2017 Alejandro Suarez Fernandez-Miranda
 *
 * This source code is part of the PhD thesis "Dexterous Aerial Manipulation"
 * and part of the AEROARMS project.
 *
 * University of Seville - Robotics, Vision and Control Group
 *
 * The distribution of this source code is not allowed without the consent of the author
 *
 * File name: ThreadsSTM32Board.h
 */
 
 
#ifndef THREADSSTM32BOARD_H_
#define THREADSSTM32BOARD_H_

// Standard library
#include <iostream>
#include <fstream>
#include <termios.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>


// Specific library
#include "../Structures/Structures.h"
#include "../Constants/Constants.h"


// Constant definition



/*
 * Thread function for micro-controller board data reception. Data packets containing the measurements
 * of joints deflection provided by the compliant torque sensors are received through the serial interface.
 */
static void * STM32BoardThreadFunction(void * args)
{
	THREAD_ARGS * threadArgs = (THREAD_ARGS*)args;
	ARM_STATE_PACKET * armStatePacket = NULL;
	float ADCdata[8];
	float ADCdataOffset[8];
	uint16_t calibrationIndex = 0;
	uint8_t operationState = 0;			// 0: calibration; 2, normal operation
	uint8_t bufferRx[1024];
	uint8_t buffer[1024];
	uint8_t bufferAux[1024];
	uint8_t tempBuffer[64];
	ssize_t bytesRead = 0;
	ssize_t bytesReceived = 0;
	unsigned int k = 0;
	unsigned int n = 0;
	uint8_t checksum = 0;
	uint8_t packetCorrect = 0;
	int error = 0;
	
	uint8_t rxState = 1;
	unsigned int headerIndex = 0;
	bool headerFound = false;
	bool packetReceived = false;
	bool bufferOverflow = false;
	
	ofstream outDataFile;
	extern struct timeval t0;
	struct timeval t1;
	double t = 0;
	float value = 0;
	
	
	cout << "STM32Board interface thread started" << endl;
	
	// Open output data file
	outDataFile.open("STM32Board_DataFile.txt");
	if(outDataFile.is_open() == false)
		cout << "ERROR: [in STM32BoardThreadFunction] could not open out data file." << endl;
	
	// Start obtaining the ADC calibration values
	operationState = CALIBRATION_STATE;
	
	// Init data acquisition loop
	while(error == 0 && threadArgs->endFlag == false)
	{
		// Initialize variables of the state machine
		bytesReceived = 0;
		rxState = 1;
		headerFound = false;
		packetReceived = false;
		
		while(packetReceived == false && error == 0 && threadArgs->endFlag == false)
		{
			switch (rxState)
			{
				case 1:
					// Wait the reception of a new data packet
					bytesRead = read(threadArgs->usbDeviceSTM32Board, (char*)bufferRx, 1023);
					printf("Bytes read: %ld\n", bytesRead);
					if(bytesRead > 0)
					{
						if(bytesReceived + bytesRead >= 1024)
						{
							bufferOverflow = true;
							bytesReceived = 0;
							headerFound = false;
							packetReceived = false;
							if(STM32BOARD_WARNING_DISPLAY_FLAG == 1)
								cout << "WARNING: [in STM32BoardThreadFunction] buffer overflow" << endl;
						}
						else
						{
							// Copy the received data into the buffer
							for(k = 0; k < bytesRead; k++)
								buffer[k + bytesReceived] = bufferRx[k];
							
							bytesReceived += bytesRead;
						}
					}

					// Decide which is the next state
					if(bytesRead <= 0 || bytesReceived < 3 || bufferOverflow == true)
					{
						rxState = 1;			// Wait the reception of data
						bufferOverflow = false;
					}
					else
					{
						if(headerFound == false)
							rxState = 2;	// After receiving new data, check if header is found
						else
							rxState = 3;	// Header was already found. Now check if packet is completely received.
					}
						
					break;
				
				
				case 2:
					// Look for packet header ("ARM" character sequence)
					headerFound = false;
					for(k = 0; k < bytesReceived - 2 && headerFound == false; k++)
					{
						if(buffer[k] == 'A' && buffer[k+1] == 'R' && buffer[k+2] == 'M')
						{
							headerFound = true;
							headerIndex = k;
						}
					}
					
					// Decide which is the next state
					if(headerFound == false)
						rxState = 1;	// Wait the reception of new data in the next state
					else
						rxState = 3;	// Check if the packet has been completely received
					
					break;
			
			
				case 3:		
					// Check if the packet has been fully received
					if(bytesReceived - headerIndex >= sizeof(ARM_STATE_PACKET))
						packetReceived = true;
					else
						packetReceived = false;
					
					// Decide which is the next state
					if(packetReceived == false)
						rxState = 1;	// Wait the reception of new data in the next state
				
					break;
			}
		}
		
		// Extract the data packet
		for(k = 0; k < sizeof(ARM_STATE_PACKET); k++)
			tempBuffer[k] = buffer[k + headerIndex];
		
		armStatePacket = (ARM_STATE_PACKET*)tempBuffer;
		
		// Check if checksum is correct
		checksum = 0;
		for(k = 3; k < sizeof(ARM_STATE_PACKET) - 2; k++)
			checksum ^= (uint8_t)tempBuffer[k];
		if(checksum == armStatePacket->checksum)
			packetCorrect = 1;
		else
		{
			if(STM32BOARD_WARNING_DISPLAY_FLAG == 1)
				cout << "WARNING: [in STM32BoardThreadFunction] packet checksum is not correct" << endl;
		}
		
		// Send the control references to the servos if packet is correct
		if(packetCorrect == 1)
		{
			// Get time stamp associated to ADC data
			gettimeofday(&t1, NULL);
			t = (t1.tv_sec - t0.tv_sec) + 1e-6*(t1.tv_usec - t0.tv_usec);
			
			// Get ADC data in Volts
			for(k = 0; k < NUM_ADC_CHANNELS_STM32BOARD; k++)
			{
				uint16_t aux = armStatePacket->jointDeflection[k];
				uint16_t lsb = 0x00FF & aux;
				aux >> 8;
				lsb << 8;
				aux |= lsb;
				value = 3.3*aux/4096;
				ADCdata[k] = value;
			}
			
			switch (operationState)
			{
				case CALIBRATION_STATE:
						
					if(calibrationIndex <= NUM_CALIBRATION_MEASUREMENTS)
					{
						for(k = 0; k < NUM_ADC_CHANNELS_STM32BOARD; k++)
							ADCdataOffset[k] += ADCdata[k]/NUM_CALIBRATION_MEASUREMENTS;
						calibrationIndex++;
					}
					else
					{
						// Switch to normal operation state
						operationState = NORMAL_OPERATION_STATE;
						/*
						cout << "ADC calibration complete" << endl;
							
						// Show calibration values on screen
						printf("Offset = { ");
						for(k = 0; k < NUM_ADC_CHANNELS_STM32BOARD; k++)
							printf("%.2f, ", ADCdataOffset[k]);
						printf("}\n");
						*/
					}
						
					break;
					
				case NORMAL_OPERATION_STATE:
					
					/*
					if(armStatePacket->packetACK != 0)
						printf("Packet ACK: %d\n", armStatePacket->packetACK);
					*/
					
					for(int index = 0; index < NUM_ADC_CHANNELS_STM32BOARD; index++)
						threadArgs->adcChannelsSTM32Board[index] = ADCdata[index];
					
					/*
					printf("ADC[1-4]: { ");
					for(int index = 0; index < NUM_ADC_CHANNELS_STM32BOARD/2; index++)
						printf("%.2lf ", threadArgs->adcChannelsSTM32Board[index]);
					printf("} ADC[5-8]: { ");
					for(int index = NUM_ADC_CHANNELS_STM32BOARD/2; index < NUM_ADC_CHANNELS_STM32BOARD; index++)
						printf("%.2lf ", threadArgs->adcChannelsSTM32Board[index]);
					cout << endl;
					*/
					
					/*
					printf("Time stamp: %.3f - Packet ID: %d\n", (float)(armStatePacket->secCounter + 1e-3*armStatePacket->msCounter), armStatePacket->packetID);
					printf("ADC signal: <");
					for(int index = 0; index < NUM_ADC_CHANNELS_STM32BOARD; index++)
						printf("%.2f ", ADCdata[index]);
					printf(">\n");
					threadArgs->armState.leftGripperContact = armStatePacket->digitalInput[0];
					threadArgs->armState.rightGripperContact = armStatePacket->digitalInput[1];
					// printf("Contact sensors: {%d, %d}\n", threadArgs->armState.leftGripperContact, threadArgs->armState.rightGripperContact);
					*/
					
					break;
			}
			
			// Save data on file
			if(outDataFile.is_open() == true)
			{
				outDataFile << t << "\t";
				for(k = 0; k < NUM_ADC_CHANNELS_STM32BOARD; k++)
					outDataFile << ADCdata[k] << "\t";
				outDataFile << endl;
			}
		}
	}
		
	/******************************** THREAD LOOP END ********************************/
		
		
	if(outDataFile.is_open() == true)
		outDataFile.close();
		
		
	cout << "STM32BoardThreadFunction interface thread terminated" << endl;


	return 0;
}


#endif 


