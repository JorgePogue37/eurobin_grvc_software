/*
 * Copyright (c) 2017 Alejandro Suarez Fernandez-Miranda
 *
 * This source code is part of the PhD thesis "Dexterous Aerial Manipulation"
 * and part of the AEROARMS project.
 *
 * University of Seville - Robotics, Vision and Control Group
 *
 * The distribution of this source code is not allowed without the consent of the author
 *
 * File name: ArmController.cpp
 */


#include "ArmController.h"



/*
 * Constructor
 * */
ArmController::ArmController(uint8_t _armID)
{
	// Set the ID of the arm
	armID = _armID;
	
	// Set pointers to NULL values
	shoulderPitchServoState = NULL;
	shoulderRollServoState = NULL;
	shoulderYawServoState = NULL;
	elbowPitchServoState = NULL;
	
	// Set the ID's of the servos to negative values
	shoulderPitchServoID = -1;
	shoulderRollServoID = -1;
	shoulderYawServoID = -1;
	elbowPitchServoID = -1;
	
	// Set the joint limits
	maxShoulderPitchAngle = 90;
	maxShoulderRollAngle = 90;
	maxShoulderYawAngle = 90;
	maxElbowPitchAngle = 150;
	minShoulderPitchAngle = -90;
	minShoulderRollAngle = -90;
	minShoulderYawAngle = -90;
	minElbowPitchAngle = -150;
	
	// Set the calibration offset
	shoulderPitchOffset = 0;
	shoulderRollOffset = 0;
	shoulderYawOffset = 0;
	elbowPitchOffset = 0;
	
	// Set the value of the arrays to zero
	for(int k = 0; k < 3; k++)
	{
		endEffectorPositionReference[k] = 0;
		endEffectorPosition[k] = 0;
		endEffectorOrientation[k] = 0;
	}
}


/*
 * Destructor
 * */
ArmController::~ArmController()
{
}

	
/*
 * Initiate arm controller: set the ID's of the servos and enable torque control.
 */
int ArmController::init(uint8_t _shoulderPitchServoID, uint8_t _shoulderRollServoID, uint8_t _shoulderYawServoID, uint8_t _elbowPitchServoID, int usbDevice)
{
	int error = 0;
	
	
	// Get the ID's of the servos
	shoulderPitchServoID = _shoulderPitchServoID;
	shoulderRollServoID = _shoulderRollServoID;
	shoulderYawServoID = _shoulderYawServoID;
	elbowPitchServoID = _elbowPitchServoID;
	
	// Initialize servos state
	shoulderPitchServoState = new ServoState(shoulderPitchServoID, 602);
	shoulderRollServoState = new ServoState(shoulderRollServoID, 402);
	shoulderYawServoState = new ServoState(shoulderYawServoID, 402);
	elbowPitchServoState = new ServoState(elbowPitchServoID, 402);
	
	// Set torque ON on arm servos
	servoTorqueControl(shoulderPitchServoID, 1, usbDevice);
	usleep(10000);
	servoTorqueControl(shoulderRollServoID, 1, usbDevice);
	usleep(10000);
	servoTorqueControl(shoulderYawServoID, 1, usbDevice);
	usleep(10000);
	servoTorqueControl(elbowPitchServoID, 1, usbDevice);
	usleep(10000);
	
	
	return error;
}


/*
 * Set the sign correction for each servo.
 */
void ArmController::setServoCorrections(int _signShoulderPitch, int _signShoulderRoll, int _signShoulderYaw, int _signElbowPitch, float _shoulderPitchOffset, float _shoulderRollOffset, float _shoulderYawOffset, float _elbowPitchOffset)
{
	if(_signShoulderPitch < 0)
		signShoulderPitch = -1;
	else
		signShoulderPitch = 1;
		
	if(_signShoulderRoll < 0)
		signShoulderRoll = -1;
	else
		signShoulderRoll = 1;
		
	if(_signShoulderYaw < 0)
		signShoulderYaw = -1;
	else
		signShoulderYaw = 1;
		
	if(_signElbowPitch < 0)
		signElbowPitch = -1;
	else
		signElbowPitch = 1;
	
	shoulderPitchOffset = _shoulderPitchOffset;
	shoulderRollOffset = _shoulderRollOffset;
	shoulderYawOffset = _shoulderYawOffset;
	elbowPitchOffset = _elbowPitchOffset;
	
	shoulderPitchServoState->setJointCorrections(signShoulderPitch, shoulderPitchOffset);
	shoulderRollServoState->setJointCorrections(signShoulderRoll, shoulderRollOffset);
	shoulderYawServoState->setJointCorrections(signShoulderYaw, shoulderYawOffset);
	elbowPitchServoState->setJointCorrections(signElbowPitch, elbowPitchOffset);
}

	
/*
 * Set the maximum value for the joint limits  (in degrees, physical limits, referred to the servo shaft frame)
 */
void ArmController::setMaximumJointLimits(float _maxShoulderPitchAngle, float _maxShoulderRollAngle, float _maxShoulderYawAngle, float _maxElbowPitchAngle)
{
	maxShoulderPitchAngle = _maxShoulderPitchAngle;
	maxShoulderRollAngle = _maxShoulderRollAngle;
	maxShoulderYawAngle = _maxShoulderYawAngle;
	maxElbowPitchAngle = _maxElbowPitchAngle;
}
	
	
/*
 * Set the minimum value for the joint limits  (in degrees, physical limits, referred to the servo shaft frame)
 */
void ArmController::setMinimumJointLimits(float _minShoulderPitchAngle, float _minShoulderRollAngle, float _minShoulderYawAngle, float _minElbowPitchAngle)
{
	minShoulderPitchAngle = _minShoulderPitchAngle;
	minShoulderRollAngle = _minShoulderRollAngle;
	minShoulderYawAngle = _minShoulderYawAngle;
	minElbowPitchAngle = _minElbowPitchAngle;
}
	
	
/*
 * Update servo state from the received data packet. The ID of the corresponding servo is determined from the data packet.
 * The state of the servo is referred to its shaft frame (no sign or offset conversion is applied).
 */
int ArmController::updateServoState(char * dataPacket, int bytesReceived)
{
	uint8_t servoID = 0;
	int error = 0;
	
	
	if(bytesReceived < SERVO_DATA_PACKET_LENGTH)
	{
		error = 1;
		cout << "WARNING: [in ArmController::updateServoState] packet size is not correct" << endl;
		cout << "Bytes received: " << bytesReceived << endl;
	}
	else
	{
		uint8_t h1 = (uint8_t)dataPacket[0];
		uint8_t h2 = (uint8_t)dataPacket[1];
		uint8_t h3 = (uint8_t)dataPacket[4];
		if(h1 != 255 || h2 != 255 || h3 != 68)
		{
			error = 1;
			cout << "WARNING: [in ArmController::updateServoState] packet header not recognized" << endl;
		}
		else
		{
			// Get servo ID
			servoID = (uint8_t)dataPacket[3];
			// Update the state of the servo. The sign and offset corrections are applied within the ServoState object.
			if(servoID == shoulderPitchServoID)
				shoulderPitchServoState->updateServoState(dataPacket);
			else if(servoID == shoulderRollServoID)
				shoulderRollServoState->updateServoState(dataPacket);
			else if(servoID == shoulderYawServoID)
				shoulderYawServoState->updateServoState(dataPacket);
			else if(servoID == elbowPitchServoID)
				elbowPitchServoState->updateServoState(dataPacket);
			else
			{
				printf("WARNING: [in ArmController::updateServoState] servo ID %d not recognized on arm %d\n", servoID, armID);
				printf("ID's of the active servos for arm %d: {%d, %d, %d, %d}\n", armID, shoulderPitchServoID, shoulderRollServoID, shoulderYawServoID, elbowPitchServoID);
			}
		}
	}
	
	
	return error;
}


/*
 * Update the reference Cartesian position of the end effector
 */
void ArmController::updateEndEffectorRefPosition(double xref, double yref, double zref)
{
	endEffectorPositionReference[0] = xref;
	endEffectorPositionReference[1] = yref;
	endEffectorPositionReference[2] = zref;
}

	
/*
 * Enable/disable torque control of the specified servo
 */
void ArmController::servoTorqueControl(uint8_t servoID, uint8_t controlMode, int usbDevice)
{
	uint8_t packet[16];
	uint8_t packetLength = 0;
	
	
	// Set the fields of the packet
	packet[0] = 0xFF;		// Header
	packet[1] = 0xFF;
	packet[2] = 0x0A;		// Packet length
	packet[3] = servoID;	// Servo ID
	packet[4] = 0x03;		// RAM write
	packet[7] = 0x34;		// Register
	packet[8] = 0x01;		// Bytes to write
	switch (controlMode)
	{
		case 0:
			packet[9] = 0x00;	// Torque free
			break;
		case 1:
			packet[9] = 0x60;	// Torque ON
			break;
		case 2:
			packet[9] = 0x40;	// Break ON
			break;
		default:
			packet[9] = 0x00;	// Torque free
			break;
	}
	
	// Compute the checksum
	computeChecksum((char*)packet, packet[2]);
	
	// Send the packet
	sendData((char*)packet, packet[2], usbDevice);
}


/*
 * Move the indicated joint to the desired absolute position in the specified time. Offset and sign corrections
 * are applied, so the desired goal position is defined with respect to the arm frame.
 */
int ArmController::moveJoint(uint8_t servoID, float position, float playTime, int usbDevice)
{
	uint8_t packet[16];
	uint8_t packetLength = 0;
	float goalPosition = 0;
	float playTimeByte = 0;
	float positionAux = 0;
	uint16_t position2Bytes = 0;
	int error = 0;
	
	
	// Angle(Degree) = 0.02778Â·(Position Raw Data - 16384)
	// Play time 1 = 11.2 ms

	// Set the fields of the packet
	packet[0] = 0xFF;		// Header
	packet[1] = 0xFF;
	packet[2] = 0x0C;		// Packet size
	packet[3] = servoID;	// Servo ID
	packet[4] = 0x05;		// I_JOG command
	
	/* ----------------- DATA SPECIFIC TO EACH SERVO ----------------- */
	// Apply the sign correction
	if(servoID == shoulderPitchServoState->servoID)
		position *= signShoulderPitch;
	else if(servoID == shoulderRollServoState->servoID)
		position *= signShoulderRoll;
	else if(servoID == shoulderYawServoState->servoID)
		position *= signShoulderYaw;
	else if(servoID == elbowPitchServoState->servoID)
		position *= signElbowPitch;
	else
		cout << "WARNING: [in ArmController::moveServo] servo ID " << servoID << " not recognized on arm " << armID << "." << endl;
	
	// Check if goal position is within the limits
	goalPosition = limitServoRotation(servoID, position);
	
	
	// Compute and set goal position (NOTE: different range for DRS-0402/0602 and DRS-0101)
	if(servoID == shoulderPitchServoID || servoID == shoulderRollServoID || servoID == shoulderYawServoID || servoID == elbowPitchServoID)
		positionAux = 16384 + goalPosition / 0.02778;
	else if(servoID == wristYawServoID || servoID == wristPitchServoID)
		positionAux = 512 + goalPosition / 0.325;
	else
		error = 1;

	position2Bytes = (uint16_t)positionAux;
	packet[7] = (uint8_t)(0x00FF & position2Bytes);
	position2Bytes = position2Bytes >> 8;
	packet[8] = (uint8_t)(0x00FF & position2Bytes);
	
	packet[9] = (uint8_t)8;		// SET: Stop, Position/Velocity control mode, Green/Blue/Red LED, Disable VOR
	packet[10] = servoID;		// Servo ID
	
	// Compute and set play time in the range 0 - 255
	playTimeByte = playTime / 0.0112;
	if(playTimeByte < 1)
		playTimeByte = 1;
	if(playTimeByte > 255)
		playTimeByte = 255;
	packet[11] = (uint8_t)playTimeByte;
	/* --------------------------------------------------------------- */
	
	// Compute the checksum
	computeChecksum((char*)packet, packet[2]);
	
	// Send the packet
	if(error == 0)
		sendData((char*)packet, packet[2], usbDevice);
}	


/*
 * Move the indicated servo to the desired absolute position in the specified time. Only the sign correction
 * is applied (no offset correction). This function should be only used for calibration and servo identification.
 */
int ArmController::moveServo(uint8_t servoID, float position, float playTime, int usbDevice)
{
	uint8_t packet[16];
	uint8_t packetLength = 0;
	float goalPosition = 0;
	float playTimeByte = 0;
	float positionAux = 0;
	float positionCorrected;
	uint16_t position2Bytes = 0;
	int error = 0;
	
	
	// Angle(Degree) = 0.02778Â·(Position Raw Data - 16384)
	// Play time 1 = 11.2 ms

	// Set the fields of the packet
	packet[0] = 0xFF;		// Header
	packet[1] = 0xFF;
	packet[2] = 0x0C;		// Packet size
	packet[3] = servoID;	// Servo ID
	packet[4] = 0x05;		// I_JOG command
	
	/* ----------------- DATA SPECIFIC TO EACH SERVO ----------------- */
	
	// Apply the sign and offset corrections
	if(servoID == shoulderPitchServoState->servoID)
		positionCorrected = signShoulderPitch*(position + shoulderPitchOffset);
	else if(servoID == shoulderYawServoState->servoID)
		positionCorrected = signShoulderRoll*(position + shoulderRollOffset);
	else if(servoID == shoulderYawServoState->servoID)
		positionCorrected = signShoulderYaw*(position + shoulderYawOffset);
	else if(servoID == elbowPitchServoState->servoID)
		positionCorrected = signElbowPitch*(position + elbowPitchOffset);
	else
		cout << "WARNING: [in ArmController::moveJoint] servo ID " << servoID << " not recognized on arm " << armID << "." << endl;
	
	// Check if goal position is within the limits
	goalPosition = limitServoRotation(servoID, positionCorrected);
	
	// Compute and set goal position (NOTE: different range for DRS-0402/0602 and DRS-0101/0201)
	if(servoID == shoulderPitchServoID || servoID == shoulderRollServoID || servoID == shoulderYawServoID || servoID == elbowPitchServoID)
		positionAux = 16384 + goalPosition / 0.02778;
	else if(servoID == wristYawServoID || servoID == wristPitchServoID)
		positionAux = 512 + goalPosition / 0.325;
	else
		error = 1;

	position2Bytes = (uint16_t)positionAux;
	packet[7] = (uint8_t)(0x00FF & position2Bytes);
	position2Bytes = position2Bytes >> 8;
	packet[8] = (uint8_t)(0x00FF & position2Bytes);
	
	packet[9] = (uint8_t)8;		// SET: Stop, Position/Velocity control mode, Green/Blue/Red LED, Disable VOR
	packet[10] = servoID;	// Servo ID
	
	// Compute and set play time in the range 0 - 255
	playTimeByte = playTime / 0.0112;
	if(playTimeByte < 1)
		playTimeByte = 1;
	if(playTimeByte > 255)
		playTimeByte = 255;
	packet[11] = (uint8_t)playTimeByte;
	/* --------------------------------------------------------------- */
	
	// Compute the checksum
	computeChecksum((char*)packet, packet[2]);
	
	// Send the packet
	if(error == 0)
		sendData((char*)packet, packet[2], usbDevice);
}	


/*
 * Limit joint position taking into account mechanical constraints and recommended operation range.
 */
float ArmController::limitServoRotation(uint8_t servoID, float position)
{
	float positionLimited = position;
	
	
	if(servoID == shoulderPitchServoState->servoID)
	{
		if(position > maxShoulderPitchAngle)
			positionLimited = maxShoulderPitchAngle;
		else if(position < minShoulderPitchAngle)
			positionLimited = minShoulderPitchAngle;
	}
	else if(servoID == shoulderRollServoState->servoID)
	{
		if(position > maxShoulderRollAngle)
			positionLimited = maxShoulderRollAngle;
		else if(position < minShoulderRollAngle)
			positionLimited = minShoulderRollAngle;
	}
	else if(servoID == shoulderYawServoState->servoID)
	{
		if(position > maxShoulderYawAngle)
			positionLimited = maxShoulderYawAngle;
		else if(position < minShoulderYawAngle)
			positionLimited = minShoulderYawAngle;
	}
	else if(servoID == elbowPitchServoState->servoID)
	{
		if(position > maxElbowPitchAngle)
			positionLimited = maxElbowPitchAngle;
		else if(position < minElbowPitchAngle)
			positionLimited = minElbowPitchAngle;
	}
	
	
	return positionLimited;
}


/*
 * Compute the checksum 1 and checksum 2 of the packet passed as first argument with the specified length.
 */
void ArmController::computeChecksum(char * packet, uint8_t packetSize)
{
	uint8_t checksum1 = 0;
	uint8_t checksum2 = 0;
	uint8_t checksumTemp = 0;
	
	
	// Compute checksum-1
	checksumTemp = packet[2] ^ packet[3] ^ packet[4];
	for(uint8_t n = 7; n < packetSize; n++)
		checksumTemp ^= packet[n];
	checksum1 = checksumTemp & 0xFE;
	
	// Set checksum-1 to packet
	packet[5] = checksum1;
	
	// Compute checksum-2
	checksum2 = (~checksumTemp) & 0xFE;
	
	// Set checksum-2
	packet[6] = checksum2;
}


/*
 * Send data through the serial port.
 */
int ArmController::sendData(char * data, uint8_t dataLength, int usbDevice)
{
	ssize_t bytesSent = 0;
	int error = 0;
	
	
	// Send data
	bytesSent = write(usbDevice, data, dataLength);
	if(bytesSent <= 0)
	{
		error = 1;
		cout << "ERROR: [in ArmController::sendData] could not send any data" << endl;
	}
	else if(bytesSent < dataLength)
	{
		error = 1;
		cout << "ERROR: [in ArmController::sendData] could not send all data" << endl;
	}

	
	return error;
}

